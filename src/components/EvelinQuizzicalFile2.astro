---
import BlueBg from "./BlueBg.astro";
import EvelinFileWrapper from "./EvelinFileWrapper.astro";
import WithBorderParagraph from "./WithBorderParagraph.astro";
import WithSmallTriangle from "./WithSmallTriangle.astro";
import ReactImageWrapper from "./ReactImageWrapper.tsx";
import ReactImage from "./ReactImage.tsx";

const { fileTitle, bgColor, cardBgColor, id } = Astro.props;
---

<EvelinFileWrapper
  title={fileTitle}
  bgColor={bgColor}
  cardBgColor={cardBgColor}
  id={id}
  paddingX="px-[20px] sm:px-[30px] 2xl:px-0"
  paddingY="py-[80px] sm:py-[90px] xl:py-[130px]"
>
  <h3
    class="font-extrabold text-[21px] sm:text-[26px] xl:text-[40px] text-center leading-[20px]"
  >
    INFORMATION ARCHITECTURE
  </h3>
  <BlueBg className="mt-[20px] sm:mt-[70px] xl:mt-[80px]">
    I began by identifying and <strong>laying out all the components</strong> of
    the game to gain a comprehensive overview. Next, I organized the content and
    <strong>established a clear hierarchy</strong> to define the navigation, menus,
    and overall structural layout. This process ensured that all necessary information
    was accounted for and logically arranged, creating a <strong
      >solid foundation</strong
    > for designing
    <strong>intuitive interactions</strong>.
  </BlueBg>

  <h4
    class="font-bold text-[17px] sm:text-[21px] xl:text-[32px] mt-[40px] sm:mt-[70px] xl:mt-[80px] text-right pb-[5px] sm:pb-0 xl:pb-0"
  >
    SITEMAP
  </h4>

  <WithBorderParagraph className="sm:mt-[30px] xl:mt-[30px] mx-[-20px] xl:mx-0">
    The following ImageWrapper outlines the <strong>main sections</strong> of the
    game. It is designed to <strong
      >prioritize easy access to key functions</strong
    > like starting a new game or customizing default settings for a personalized
    experience.
  </WithBorderParagraph>

  <ReactImageWrapper invertIcon={true} client:only className="mt-[25px] w-full"
    ><ReactImage src="quizzical_sitemap" alt="sitemap for the quizzical game" />
  </ReactImageWrapper>

  <h4
    class="font-bold text-[17px] sm:text-[21px] xl:text-[32px] mt-[30px] xl:mt-[80px] text-left pb-[5px] xl:pb-0 xl:ml-0"
  >
    USER FLOW
  </h4>

  <WithBorderParagraph className="sm:mt-[30px] xl:mx-0">
    From the outset, it was evident that <strong
      >prioritizing speed and efficiency</strong
    > was essential for this lightweight, single-player, no-login browser game for
    a
    <strong>seamless experience</strong>. This requirement guided the decision
    to implement the game using conditional rendering rather than endpoints. As
    a result, navigation is confined to the gameâ€™s interface, with users unable
    to move back and forth through the URL. With this approach established, I
    developed the two primary user flows.
  </WithBorderParagraph>

  <div class="flex flex-col gap-[30px] pt-[40px]">
    <div class="flex flex-col gap-[20px]">
      <WithSmallTriangle triangleColor={bgColor} triangleInside={true}
        ><strong>The primary path to start a new game</strong> (with default settings),
        including replaying options</WithSmallTriangle
      >

      <ReactImageWrapper invertIcon={true} className="mt-[10px]" client:only
        ><ReactImage
          src="quizzical_default_user_flow"
          alt="default user flow in the quizzical app"
        />
      </ReactImageWrapper>
    </div>

    <div class="flex flex-col gap-[20px] mt-[20px]">
      <WithSmallTriangle triangleColor={bgColor} triangleInside={true}>
        <strong>The primary path to play a customized game</strong>, including
        replaying options
      </WithSmallTriangle>

      <ReactImageWrapper invertIcon={true} className="mt-[10px]" client:only
        ><ReactImage
          src="quizzical_personalized_user_flow"
          alt="personalized user flow in the quizzical app"
        />
      </ReactImageWrapper>
    </div>
  </div>
</EvelinFileWrapper>

---
import BlueBg from "./BlueBg.astro";
import EnlargedPicture from "./EnlargedPicture.astro";
import EvelinFileWrapper from "./EvelinFileWrapper.astro";
import QuizzicalSitemap from "./QuizzicalSitemap.astro";
import QuizzicalUserFlowCustom from "./QuizzicalUserFlowCustom.astro";
import QuizzicalUserFlowDefault from "./QuizzicalUserFlowDefault.astro";
import WithBorderParagraph from "./WithBorderParagraph.astro";
import WithMagnifyingGlass from "./WithMagnifyingGlass.tsx";
import WithSmallTriangle from "./WithSmallTriangle.astro";

const { fileTitle, bgColor, cardBgColor, id } = Astro.props;
---

<EvelinFileWrapper
  title={fileTitle}
  bgColor={bgColor}
  cardBgColor={cardBgColor}
  id={id}
  paddingX="px-[20px]"
  paddingY="py-[80px] sm:py-[90px] xl:py-[130px]"
>
  <h3
    class="font-extrabold text-[21px] xl:text-[40px] sm:mt-[26px] xl:mt-[84px] text-center leading-[20px]"
  >
    INFORMATION ARCHITECTURE
  </h3>
  <BlueBg>
    I began by identifying and <strong>laying out all the components</strong> of
    the game to gain a comprehensive overview. Next, I organized the content and
    <strong>established a clear hierarchy</strong> to define the navigation, menus,
    and overall structural layout. This process ensured that all necessary information
    was accounted for and logically arranged, creating a <strong
      >solid foundation</strong
    > for designing
    <strong>intuitive interactions</strong>.
  </BlueBg>

  <h4
    class="font-bold text-[17px] sm:text-[21px] xl:text-[32px] font-['Jost'] mt-[30px] text-right py-[10px]"
  >
    SITEMAP
  </h4>

  <WithBorderParagraph className="sm:mb-[40px] mx-[-20px]">
    The following Sitemap outlines the <strong>main sections</strong> of the game.
    It is designed to <strong>prioritize easy access to key functions</strong> like
    starting a new game or customizing default settings for a personalized experience.
  </WithBorderParagraph>

  <WithMagnifyingGlass className="mt-[20px]" invert={true}>
    <QuizzicalSitemap imgSelector="quizzical-sitemap" />
  </WithMagnifyingGlass>

  <EnlargedPicture
    imgSelector="quizzical-sitemap"
    modalSelector="quizzical-sitemap-modal"
    modalClose="quizzical-sitemap-modal-close"
  >
    <QuizzicalSitemap />
  </EnlargedPicture>

  <h4
    class="font-bold text-[17px] sm:text-[21px] xl:text-[32px] font-['Jost'] mt-[30px] sm:mt-[70px] text-left py-[10px] xl:ml-[80px]"
  >
    USER FLOW
  </h4>

  <WithBorderParagraph>
    From the outset, it was evident that <strong
      >prioritizing speed and efficiency</strong
    > was essential for this lightweight, single-player, no-login browser game for
    a
    <strong>seamless experience</strong>. This requirement guided the decision
    to implement the game using conditional rendering rather than endpoints. As
    a result, navigation is confined to the gameâ€™s interface, with users unable
    to move back and forth through the URL. With this approach established, I
    developed the two primary user flows.
  </WithBorderParagraph>

  <div class="flex flex-col gap-[30px] pt-[40px] sm:pb-[40px]">
    <div class="flex flex-col gap-[20px]">
      <WithSmallTriangle triangleColor={bgColor}
        ><strong>The primary path to start a new game</strong> (with default settings),
        including replaying options</WithSmallTriangle
      >

      <WithMagnifyingGlass invert={true}>
        <QuizzicalUserFlowDefault imgSelector="quizzical-default-user-flow" />
      </WithMagnifyingGlass>

      <EnlargedPicture
        imgSelector="quizzical-default-user-flow"
        modalSelector="quizzical-default-user-flow-modal"
        modalClose="quizzical-default-user-flow-modal-close"
      >
        <QuizzicalUserFlowDefault />
      </EnlargedPicture>
    </div>

    <div class="flex flex-col gap-[20px]">
      <WithSmallTriangle triangleColor={bgColor}>
        <strong>The primary path to play a customized game</strong>, including
        replaying options
      </WithSmallTriangle>

      <WithMagnifyingGlass invert={true}>
        <QuizzicalUserFlowCustom imgSelector="quizzical-custom-user-flow" />
      </WithMagnifyingGlass>

      <EnlargedPicture
        imgSelector="quizzical-custom-user-flow"
        modalSelector="quizzical-custom-user-flow-modal"
        modalClose="quizzical-custom-user-flow-modal-close"
      >
        <QuizzicalUserFlowCustom />
      </EnlargedPicture>
    </div>
  </div>
</EvelinFileWrapper>
